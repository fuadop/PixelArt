type Query {
    rooms: [Room!]!
    room(id: ID!): Room!
}

type Mutation {
    createRoom(data: CreateRoomInput!): Room!
    joinRoom(data: JoinRoomInput!): Room!
    deleteRoom(data: DeleteRoomInput!): Room!
    startGame(data: StartGameInput!): Room!
    updateGame(data: UpdateGameInput!): Room!
}

type Subscription {
    roomStateChange(data: RoomStateChangeInput!): RoomStateChangePayload!
}

type Room {
    id: ID!
    name: String!
    player1: String!
    player2: String
    password: String!
    words: [String!]!
    isStarted: Boolean!
    player1Speed: String
    player2Speed: String
    player1Errors: Int
    player2Errors: Int
    player1WordsTyped: Int
    player2WordsTyped: Int
}

input CreateRoomInput {
    name: String!
    player1: String!
    password: String!
}

input JoinRoomInput {
    roomid: ID!
    player2: String!
    password: String!
}

input DeleteRoomInput {
    roomid: ID!

}

input StartGameInput {
    roomid: ID!
}

input UpdateGameInput {
    roomid: ID!
    player: String!
    speed: String
    wordsTyped: Int
    errors: Int
}

input RoomStateChangeInput {
    roomid: ID!
}


enum RoomStateMutation {
    CREATED
    JOINED
    STARTGAME
    UPDATEDTEXT
}

type RoomStateChangePayload {
    mutation: RoomStateMutation!
    data: Room!
}